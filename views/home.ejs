<!DOCTYPE html>
<html lang="en">

<head>
  <% include partials/header.ejs %>
  <title>MongoChat</title>
  <style>
    #messages {
      height: 300px;
    }
  </style>
</head>

<body>

  <% include partials/nav.ejs %>



  <div class="container">
    <div class="row">
      <div class="col-md-6 offset-md-3 col-sm-12">
        <h1 class="text-center">
          MongoChat
          <button id="clear" class="btn btn-danger ml-3 btn-sm">Clear</button>
        </h1>
        <div id="status"></div>
        <div id="chat">
          <input type="text" id="username" class="form-control" placeholder="Enter name...">
          <br>
          <div class="card">
            <div id="messages" class="card-block">

            </div>
          </div>
          <br>
          <textarea id="textarea" class="form-control" placeholder="Enter message..."></textarea>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"></script>

  <script>
    (function () {
      const element = function (id) {
        return document.getElementById(id);
      };

      // Get Elements
      const status = element('status');
      const messages = element('messages');
      const textarea = element('textarea');
      const username = element('username');
      const clearBtn = element('clear');

      // Set default status
      const statusDefault = status.textContent;

      const setStatus = function (s) {
        // Set status
        status.textContent = s;

        if (s !== statusDefault) {
          const delay = setTimeout(function () {
            setStatus(statusDefault);
          }, 4000);
        }
      };

      // Connect to socket.io
      const socket = io.connect('http://127.0.0.1:4000');

      // Check for connection
      if (socket !== undefined) {
        console.log('Connected to socket...');

        // Handle Output
        socket.on('output', function (data) {
          //console.log(data);
          if (data.length) {
            for (let x = 0; x < data.length; x++) {
              // Build out message div
              const message = document.createElement('div');
              message.setAttribute('class', 'chat-message');
              message.textContent = data[x].name + ": " + data[x].message;
              messages.appendChild(message);
              messages.insertBefore(message, messages.firstChild);
            }
          }
        });

        // Get Status From Server
        socket.on('status', function (data) {
          // get message status
          setStatus((typeof data === 'object') ? data.message : data);

          // If status is clear, clear text
          if (data.clear) {
            textarea.value = '';
          }
        });

        // Handle Input
        textarea.addEventListener('keydown', function (event) {
          if (event.which === 13 && event.shiftKey === false) {
            // Emit to server input
            socket.emit('input', {
              name: username.value,
              message: textarea.value
            });

            event.preventDefault();
          }
        });

        // Handle Chat Clear
        clearBtn.addEventListener('click', function () {
          socket.emit('clear');
        });

        // Clear Message
        socket.on('cleared', function () {
          messages.textContent = '';
        });
      }

    })();
  </script>


</body>

</html>
